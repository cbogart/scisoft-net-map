{% extends "base.jinja2" %}
{% block title %}Most used applications{% endblock %}
{% block content_title  %}<h1>Top applications overview</h1>{% endblock %}

{% block head %}
  {{ super() }}
  <link href="
  {{request.static_url('snmweb:static/css/dsm.css')}}" rel="stylesheet">

{% endblock %}

{% block js %}
  <script src="{{request.static_url('snmweb:static/js/lib/d3.js')}}"></script>
  <script>
    ids = ['d06f6defc0', 'a4a08f986e', '90d90e04d0', '5b0209c8d3'];
    var data = {nodes:
      [{"name": "Euler"},   //0
        {"name": "Freemat"}, //1
        {"name": "Maxima"},  //2
        {"name": "PARI/GP"}  //3
      ],
      links:  //matrix sparse representation
        [{"source": 0, "target": 1, "value": 3},
          {"source": 1, "target": 0, "value": 2},
          {"source": 3, "target": 2, "value": 5},
          {"source": 2, "target": 3, "value": 7},
          {"source": 1, "target": 3, "value": 5},
          {"source": 3, "target": 3, "value": 3},
          {"source": 2, "target": 1, "value": 8}

        ] };

    snmapi.getStat("co_occurence", {},
      function(r) {
        var data = r.data;
        var container = $("#chart"),
          width = container.width(),
          height = container.height(),
          side = Math.min(width, height),
          height = side - 80,
          width = side - 80;
        var svg = d3.select("#chart svg")
          .attr("width", side)
          .attr("height", side)
          .append("g")
          .attr("transform", function (d, i) {
            return "translate(80,80)";
          });
        var x = d3.scale.ordinal().rangeBands([0, width]),
          z = d3.scale.linear().domain([0, 8]).clamp(true),
          c = d3.scale.category10().domain(d3.range(10));
        var matrix = [],
          nodes = data.nodes,
          n = nodes.length;

        // Init matrix
        nodes.forEach(function (node, i) {
          node.index = i;
          node.count = 0;
          matrix[i] = d3.range(n).map(function (j) {
            return {x: j, y: i, z: 0};
          });
        });

        // Convert links to matrix; count link weight
        data.links.forEach(function (link) {
          matrix[link.source][link.target].z += link.value;
          nodes[link.source].count += link.value;
          nodes[link.target].count += link.value;
        });

        x.domain(d3.range(n).sort(function (a, b) {
          return nodes[b].count - nodes[a].count;
        }));

        svg.append("rect")
          .attr("class", "background")
          .attr("width", width)
          .attr("height", height);

        var row = svg.selectAll(".viz-dsm-row")
          .data(matrix).enter()
          .append("g")
          .attr("class", "viz-dsm-row")
          .attr("transform", function (d, i) {
            return "translate(0," + x(i) + ")";
          })
          .each(cells);

        row.append("line")
          .attr("x2", width);

        row.append("text")
          .attr("x", -6)
          .attr("y", x.rangeBand() / 2)
          .attr("dy", ".32em")
          .attr("text-anchor", "end")
          .text(function (d, i) {
            return nodes[i].name;
          });

        var column = svg.selectAll(".column")
          .data(matrix)
          .enter().append("g")
          .attr("class", "column")
          .attr("transform", function (d, i) {
            return "translate(" + x(i) + ")rotate(-90)";
          });

        column.append("line")
          .attr("x1", -width);

        column.append("text")
          .attr("x", 6)
          .attr("y", x.rangeBand() / 2)
          .attr("dy", ".32em")
          .attr("text-anchor", "start")
          .text(function (d, i) {
            return nodes[i].name;
          });

        function cells(row) {
          var self = d3.select(this);
          var cell = self.selectAll(".cell")
            .data(row.filter(function (d) {
              return d.z;
            }))
            .enter().append("rect")
            .attr("class", "cell")
            .attr("x", function (d) {
              return x(d.x);
            })
            .attr("width", x.rangeBand())
            .attr("height", x.rangeBand())
            .style("fill-opacity", function (d) {
              return z(d.z);
            })
            .style("fill", c(1));
        }
      });
  </script>
{% endblock %}


{% block content %}

  <div class="col-md-3">
    <div class="panel panel-default">
      <div class="panel-heading">Choose property</div>
      <div class="panel-body">
        <button type="button" class="btn disabled btn-default
        btn-block">Usage over time</button>
        <button type="button" class="btn btn-primary btn-block">Dependencies</button>
        <button type="button" class="btn disabled btn-default btn-block">Users over time</button>
      </div>
    </div>
    <div class="panel panel-default">
      <div class="panel-heading">Choose most used by...</div>
      <div class="panel-body">
        <button type="button" class="btn disabled btn-default
        btn-block">Number of users</button>
        <button type="button" class="btn btn-primary btn-block">Number of
          runs</button>
        <button type="button" class="btn disabled btn-default
        btn-block">Number of dependencies</button>
      </div>
    </div>
  </div>
  <div class="col-md-9">
    <div class="panel-body">
      <div id="chart">
        <svg></svg>
      </div>
      <div class="row" id="filters">

      </div>
    </div>
  </div>

{% endblock %}
